#!/usr/bin/python
# -*- coding: UTF-8 -*-

hpp_code_template = r'''
/** **********************************************************************
 *  @file ${UNITNAME}.hpp
 * 
 *  @author cppunit
 *
 *  @copyright  (c) 20xx, someone,  All rights reserved.
 *
 *  @fenc UTF-8 without signature.
 *
 *  @brief  
 *  A C++ Unit generated by cppunit.py (https://github/compressible/cppunit) 
 *
 ******************************************************************************/

#ifndef ${HEADER_MARK}
#define ${HEADER_MARK}

//------------------------------------------------------------------------------
/**
 * @brief  A demo class. 
 */
class  ${UNITNAME}
{
public:
    void foo(); 

protected:

};


//------------------------------------------------------------------------------
#endif

'''

cpp_code_template = r'''
#include "${UNITNAME}.hpp"

//------------------------------------------------------------------------------

namespace ${UNITNAME}_internal
{

}


void ${UNITNAME}::foo()
{
    // do nothing
}


'''

usage   = r'''
    CppUnit: A python script for generate c++ unit automatically. 

    Usage : 
        cppunit.py unit_name 

'''
unitname = "CppUnit"
header_mark = "CPPUNIT_HPP"
f_hpp = "cppunit.hpp"
f_cpp = "cppunit.cpp"


import sys
import os 

if (len(sys.argv) < 2):
    print (usage)
    sys.exit(-1) 

# assemble all the strings 
unitname = sys.argv[1]
header_mark = (unitname+"_hpp").upper() 
f_hpp = unitname + ".hpp"
f_cpp = unitname + ".cpp"

##--------------------------------------------------------------------------------
## program begin!

if (os.path.exists(f_hpp)):
    print("File %s exists already, cppunit cannot create a unit with current name." % f_hpp) 
    sys.exit(-1); 
if (os.path.exists(f_cpp)):
    print("File %s exists already, cppunit cannot create a unit with current name." % f_cpp) 
    sys.exit(-1); 

#print (hpp_code_template); 
with open(f_hpp,'w') as FOUT:
    FOUT.write( hpp_code_template.replace("${UNITNAME}", unitname).replace("${HEADER_MARK}", header_mark) )

with open(f_cpp,'w') as FOUT:
    FOUT.write( cpp_code_template.replace("${UNITNAME}", unitname).replace("${HEADER_MARK}", header_mark) )

